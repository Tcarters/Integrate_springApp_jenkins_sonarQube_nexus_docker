pipeline{
    agent any 
    
    stages {
        stage('Cloning Git Repo'){
            steps{
                script{
                    git branch: 'nexus-snapshotrepo', url: 'https://github.com/Tcarters/SpringBootApp_and_DevOps.git' 
                    //'nexus-integration', url: 'https://github.com/Tcarters/SpringBootApp_and_DevOps.git'
                }
            } //end steps
        } //stage1
        stage('Compiling'){
            steps{
                script{
                    sh 'mvn compile'
                }
            } // end steps
        } // stage2
        stage ('MAVEN Cleaning') {
            steps{
                script {
                    sh 'mvn clean install'
                }
            }
        }//stage3
        
        stage('MAVEN UNIT Testing'){
            
            steps{
                
                script{
                    
                    sh 'mvn test'
                }
            }
        }//stage4
        stage('Integration Testing'){
            steps{
                script{
                    sh 'mvn verify -DskipUnitTests'
                }
            }
        }//stage5
        stage('SonarQub Static code analysis'){
            steps{
                script{
                    
                    withSonarQubeEnv(credentialsId: 'SONARQUBE_TOKEN') {  // Here we refer tname of token configured in our Jenkins sonarQube Server plugin
                        
                        sh 'mvn clean package sonar:sonar'
                    }
                } // end script
            } // end steps
        } //stage6
        stage('Quality Gate Status'){
            steps{
                script {
                    echo '<---------------Quality Gates Analysis Started-------------->'
                    timeout (time: 5) {
                             // Just in case something goes wrong, pipeline will be killed after a timeout
                            // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                            // true = set pipeline to UNSTABLE, false = don't
                    def myqualitygate = waitForQualityGate abortPipeline: true , credentialsId: 'SONARQUBE_TOKEN'  // Reuse taskId previously collected by withSonarQubeEnv
                    if ( myqualitygate.status != 'OK' ) {
                        echo "Pipeline aborted due to Quality Gate failure ðŸŽƒ: ${myqualitygate.status}"
                    }
                    else {
                        echo "Pipeline  succeeded with Quality Gate ðŸ¤— : ${myqualitygate.status}"
                     }
                    } // end timeout
                } // end script
            } // end steps    
        } //stage7
        stage('Upload our Jar file to Nexus server '){
            steps{
                script {
                    def readPomVersion = readMavenPom file: 'pom.xml'
                
                    def nexusRepo = readPomVersion.version.endsWith("SNAPSHOT") ? "javaapp-snapshot" : "javaapp-release"

                    nexusArtifactUploader artifacts: [
                        [
                            artifactId: 'springbootV3-docker', 
                            classifier: '', 
                            file: 'target/javaspringapp-v01.jar', 
                            type: 'jar'
                        ]
                    ],
                    credentialsId: 'nexus-auth', 
                    groupId: 'com.springIndocker', 
                    nexusUrl: '192.168.1.19:5000', 
                    nexusVersion: 'nexus3', 
                    protocol: 'http', 
                    repository:  nexusRepo, //'javaapp-release', 
                    version: "${readPomVersion.version}" //using dynamic reading version '1.0.0'
                } // end script
            } //end steps
        }//stage8
        stage('Docker Image of App'){
            steps{
                script {
                    echo 'Starting Docker Image building'
                    echo 'Build Image from current Jenkins job-name & build-id'
                    sh 'docker image build -t $JOB_NAME:v1.$BUILD_ID .' // Don't forget at cmd end ``point``
                    echo 'Tag the Image with our DockerHub name'
                    sh 'docker image tag $JOB_NAME:v1.$BUILD_ID tcdocker2021/springbt-in-docker:fromNexus_Snapshot '
                    echo 'Listing current Images '
                    sh 'docker image ls'
                }
            }
        } //end stage9
        stage('Push Image to DockerHub'){
            steps{
                script{
                    echo 'Logging to Docker registry.....'
                    withCredentials([string(credentialsId: 'mytcdocker-hub', variable: 'mydockerhubpwd')]) {
                    // withCredentials([string(credentialsId: 'mytcdocker-hub', variable: 'mydockerhubpwd')]) {
                        sh 'docker login -u tcdocker2021 -p ${mydockerhubpwd}'  //logging to my DockerHub account
                    }
                    echo 'Starting the push of Docker Image ....'
                    sh ' docker push tcdocker2021/springbt-in-docker:fromNexus_Snapshot'
                }
            }
        } // end stage10 
         stage ('Test by Launching Container of App') {
            steps {
                script {
                    echo 'Starting a local container of the App ....'
                    sh 'docker run -dit --name springapp -p 8100:8080 tcdocker2021/springbt-in-docker:fromNexus_Snapshot '
                    echo 'The App is now available at Port 8100 on http://jenkins-ip:81000/welcome ....'
                }
            }
        } // end stage11
    } // end stages
} //end pipeline